plugins {
	id 'java'
	id 'org.hidetake.ssh' version '2.11.2'
	id 'maven-publish'
}

group 'me.seafoam.minecraft'
version '1.0-SNAPSHOT'

compileJava.options.encoding = "UTF-8"

configurations {
	implementationResolvable {
		extendsFrom implementation
		canBeResolved true
	}
}

sourceSets {
	core {
		java {
			srcDirs = ['src/core/java']
		}
		compileClasspath += configurations.implementationResolvable
		runtimeClasspath += configurations.implementationResolvable
	}
	paper {
		java {
			srcDirs = ['src/paper/java']
		}
		compileClasspath += core.output
		runtimeClasspath += core.output
		compileClasspath += configurations.implementationResolvable
		runtimeClasspath += configurations.implementationResolvable
	}
	bungeecord {
		java {
			srcDirs = ['src/bungeecord/java']
		}
		compileClasspath += core.output
		runtimeClasspath += core.output
		compileClasspath += configurations.implementationResolvable
		runtimeClasspath += configurations.implementationResolvable
	}
}

repositories {
	mavenCentral()
	jcenter()
	maven {url 'https://repo.papermc.io/repository/maven-public/'}
	maven {url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'}
	maven {url 'https://repo.dmulloy2.net/repository/public/'}
	maven {url 'https://libraries.minecraft.net/'}
}

dependencies {
	implementationResolvable 'net.kyori:adventure-api:4.13.0'
	implementationResolvable 'net.kyori:adventure-text-serializer-gson:4.13.0'
	implementationResolvable 'net.kyori:adventure-text-serializer-legacy:4.13.0'
	implementationResolvable 'net.kyori:adventure-text-minimessage:4.13.0'
	implementationResolvable 'com.google.code.gson:gson:2.9.1'
	implementationResolvable 'com.google.guava:guava:31.1-jre'
	implementationResolvable 'com.google.code.findbugs:jsr305:3.0.2'
	implementationResolvable 'org.projectlombok:lombok:1.18.24'
	implementationResolvable 'org.jetbrains:annotations:22.0.0'

	paperImplementation 'io.papermc.paper:paper-api:1.19.4-R0.1-SNAPSHOT'
	paperImplementation 'com.comphenix.protocol:ProtocolLib:5.0.0'
	paperImplementation 'com.mojang:authlib:3.2.38'

	coreAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
	paperAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
}

remotes {
	web01 {
		host = sshHost
		user = sshUser
		password = sshPassword
	}
}

tasks.register('buildCore', Jar) {
	group = 'all'

	from sourceSets.core.output
	archiveFileName = "seafoamy-core-${version}.jar"
}

tasks.register('buildPaper', Jar) {
	group = 'all'

	from sourceSets.paper.output
	from sourceSets.core.output
	archiveFileName = "seafoamy-paper-${version}.jar"
}

tasks.register('buildBungee', Jar) {
	group = 'all'

	from sourceSets.bungeecord.output
	from sourceSets.core.output
	archiveFileName = "seafoamy-bungee-${version}.jar"
}

tasks.register("deployTestPaper") {
	group = 'all'

	dependsOn 'buildPaper'
	doLast {
		ssh.run {
			session(remotes.web01) {
				put from: "${buildDir}/libs/seafoamy-paper-${version}.jar", into: sshPluginLocation + "/seafoamy-paper.jar"
			}
		}
	}
}

tasks.register('mavenCore') {
	group 'all'

	dependsOn 'buildCore'

	doFirst {
		ssh.run {
			session(remotes.web01) {
				remove sshMavenLocation + "/me/seafoam/minecraft/seafoamy-core/${version}"
			}
		}

		generatePomFileForCorePublication.doGenerate()
		publishCorePublicationToSeafoamyRepository.publish()
	}
}

tasks.register('mavenPaper') {
	group 'all'

	dependsOn 'buildPaper'

	doFirst {
		ssh.run {
			session(remotes.web01) {
				remove sshMavenLocation + "/me/seafoam/minecraft/seafoamy-paper/${version}"
			}
		}

		generatePomFileForPaperPublication.doGenerate()
		publishPaperPublicationToSeafoamyRepository.publish()
	}
}

tasks.register('mavenBungee') {
	group 'all'

	dependsOn 'buildBungee'

	doFirst {
		ssh.run {
			session(remotes.web01) {
				remove sshMavenLocation + "/me/seafoam/minecraft/seafoamy-bungee/${version}"
			}
		}

		generatePomFileForBungeePublication.doGenerate()
		publishBungeePublicationToSeafoamyRepository.publish()
	}
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

tasks.withType(GenerateModuleMetadata) {
	enabled = false
}

publishing {
	publications {
		core(MavenPublication) {
			groupId = 'me.seafoam.minecraft'
			artifactId = 'seafoamy-core'

			artifact tasks.buildCore

			pom.withXml {
				def dependenciesNode = asNode().appendNode('dependencies')
				configurations.implementationResolvable.allDependencies.each {
					if (it.group != null && it.name != null) {
						def dependencyNode = dependenciesNode.appendNode('dependency')
						dependencyNode.appendNode('groupId', it.group)
						dependencyNode.appendNode('artifactId', it.name)
						dependencyNode.appendNode('version', it.version)
					}
				}

				def repositoriesNode = asNode().appendNode('repositories')
				project.repositories.each {
					def repositoryNode = repositoriesNode.appendNode('repository')
					repositoryNode.appendNode('id', it.name)
					repositoryNode.appendNode('url', it.url)
				}
			}
		}

		paper(MavenPublication) {
			groupId = 'me.seafoam.minecraft'
			artifactId = 'seafoamy-paper'

			artifact tasks.buildPaper

			pom.withXml {
				def dependenciesNode = asNode().appendNode('dependencies')
				configurations.paperImplementation.allDependencies.each {
					if (it.group != null && it.name != null) {
						def dependencyNode = dependenciesNode.appendNode('dependency')
						dependencyNode.appendNode('groupId', it.group)
						dependencyNode.appendNode('artifactId', it.name)
						dependencyNode.appendNode('version', it.version)
					}
				}

				def dependencyNode = dependenciesNode.appendNode('dependency')
				dependencyNode.appendNode('groupId', 'me.seafoam.minecraft')
				dependencyNode.appendNode('artifactId', 'seafoamy-core')
				dependencyNode.appendNode('version', version)

				def repositoriesNode = asNode().appendNode('repositories')
				project.repositories.each {
					def repositoryNode = repositoriesNode.appendNode('repository')
					repositoryNode.appendNode('id', it.name)
					repositoryNode.appendNode('url', it.url)
				}

				def repositoryNode = repositoriesNode.appendNode('repository')
				repositoryNode.appendNode('id', 'seafoamy')
				repositoryNode.appendNode('url', 'https://repo.seafoam.me')
			}
		}

		bungee(MavenPublication) {
			groupId = 'me.seafoam.minecraft'
			artifactId = 'seafoamy-bungee'

			artifact tasks.buildBungee

			pom.withXml {
				def dependenciesNode = asNode().appendNode('dependencies')
				configurations.bungeecordImplementation.allDependencies.each {
					if (it.group != null && it.name != null) {
						def dependencyNode = dependenciesNode.appendNode('dependency')
						dependencyNode.appendNode('groupId', it.group)
						dependencyNode.appendNode('artifactId', it.name)
						dependencyNode.appendNode('version', it.version)
					}
				}

				def dependencyNode = dependenciesNode.appendNode('dependency')
				dependencyNode.appendNode('groupId', 'me.seafoam.minecraft')
				dependencyNode.appendNode('artifactId', 'seafoamy-core')
				dependencyNode.appendNode('version', version)

				def repositoriesNode = asNode().appendNode('repositories')
				project.repositories.each {
					def repositoryNode = repositoriesNode.appendNode('repository')
					repositoryNode.appendNode('id', it.name)
					repositoryNode.appendNode('url', it.url)
				}

				def repositoryNode = repositoriesNode.appendNode('repository')
				repositoryNode.appendNode('id', 'seafoamy')
				repositoryNode.appendNode('url', 'https://repo.seafoam.me')
			}
		}
	}

	repositories {
		maven {
			name = 'seafoamy'
			url = 'sftp://' + sshHost + ':22' + sshMavenLocation
			credentials {
				username = sshUser
				password = sshPassword
			}
		}
	}
}